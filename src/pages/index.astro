---
import Chart from '../components/chart.tsx';
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.png" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>Worldcoo Kiosk</title>
  </head>
  <body class="bg-beige h-dvh flex flex-col items-center">
    <div class="font-bold text-4xl lg:text-8xl size-fit text-center tracking-tighter mt-auto">
      <span id="totalCounter"></span> €
    </div>

    <div class="mt-auto h-[200px] w-full">
      <Chart client:only="react" />
    </div>
  </body>
</html>

<script>
  import { CountUp } from 'countup.js';
  import { Odometer } from 'odometer_countup';
  import confetti from 'canvas-confetti';
  import { $donations } from '../components/store.ts';

  let previousTotal = 0;
  const goalToThrowConfetti = 10000;
  const baseTotal = 14_239_900;

  const counter = new CountUp(
    'totalCounter',
    baseTotal,
    {
      startVal: baseTotal,
      decimalPlaces: 2,
      separator: ".",
      decimal: ",",
      plugin: new Odometer({ duration: 2.3, lastDigitDelay: 0 }),
      duration: 3.0,
    }
  );

  if (!counter.error) {
    counter.start();
  } else {
    console.error(counter.error);
  }

  const updateCounter = (total: number) => {
    counter.update(total);

    // Show confetti at the end of counter animation
    if (previousTotal !== 0 && Math.round(previousTotal) % goalToThrowConfetti === 0) {
      confetti({ particleCount: 150, spread: 180 })
    }

    previousTotal = total;
  };

  const updateChart = (now: Date, date: string, amount: number) => {
    const lastDonations = $donations.get();
    const lastDonationDate = lastDonations[lastDonations.length - 1]?.date ? new Date(lastDonations[lastDonations.length - 1].date) : undefined

    // Clean chart every day
    if (
      !lastDonationDate ||
      lastDonationDate.getFullYear() !== now.getFullYear() ||
      lastDonationDate.getMonth() !== now.getMonth() ||
      lastDonationDate.getDate() !== now.getDate()) {
      $donations.set([{ date, amount }]);
      localStorage.setItem('donations', JSON.stringify([{ date, amount }]));
    } else {
      const donations = [...lastDonations, { date, amount }]
      $donations.set(donations);
      localStorage.setItem('donations', JSON.stringify(donations));
    }
  };

  const sleep = (ms: number) => new Promise((resolve) => setTimeout(resolve, ms));

  while (true) {
    const now = new Date();
    const serverResponse = await fetch(
      "https://459yv0cj03.execute-api.eu-west-1.amazonaws.com/donations",
    );
    const { donations, total } = await serverResponse.json() as { donations: { amount: number, date: string }[], total: number };

    const timeToNextDonationsRequestInSeconds = +/\d+/g.exec(
      serverResponse.headers.get("cache-control")!,
    )![0];

    let totalAmountTillNow =
      donations
        .filter((d) => new Date(d.date) <= now)
        .reduce((acc, d) => acc + d.amount, 0) + total;
    updateCounter(totalAmountTillNow);
    const newDonationsUpdates = donations
      .filter((d) => new Date(d.date) > now)
      .map((d) => {
        return new Promise((resolve) =>
          setTimeout(
            () => {
              totalAmountTillNow += d.amount;
              updateCounter(totalAmountTillNow);
              updateChart(now, d.date, d.amount);
              resolve(void 0);
            },
            new Date(d.date).getTime() - now.getTime(),
          ),
        );
      });

    await Promise.all([
      Promise.all(newDonationsUpdates),
      sleep(timeToNextDonationsRequestInSeconds * 1000),
    ]);
  }
</script>

<style is:global>
  @import url("https://fonts.googleapis.com/css2?family=Quicksand:wght@300;400;500;600;700&display=swap");
  body {
    font-family: "Quicksand", sans-serif;
  }

  /* Don't cut the comma */
  .odometer-numbers {
    padding: 2px;
  }
</style>
